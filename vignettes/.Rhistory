logging::loginfo(
"Creating box plot for categorical data (linear),
%s vs %s",
metadata_name,
feature_name
)
temp_plot <- make_boxplot_lm(joined_features_metadata_abun,
metadata_name,
feature_name,
normalization,
transformation,
coef_val,
qval,
N_nonzero,
N_total,
results_value)
}
return(temp_plot)
}
# Create boxplot for prevalence vs. continuous associations
make_boxplot_logistic <- function(joined_features_metadata_prev,
metadata_name,
feature_name,
normalization,
transformation,
coef_val,
qval,
N_nonzero,
N_total,
results_value) {
match.arg(normalization, c('Total sum scaling', 'Center log ratio', 'None'))
match.arg(transformation, c('Log base 2', 'Pseudo-log base 2', 'None'))
temp_plot <-
ggplot2::ggplot(data = joined_features_metadata_prev,
ggplot2::aes(.data$feature_abun,
.data$metadata)) +
ggplot2::geom_boxplot(
ggplot2::aes(fill = .data$feature_abun),
outlier.alpha = 0.0,
na.rm = TRUE,
alpha = .5,
show.legend = FALSE
) +
ggplot2::geom_point(
ggplot2::aes(fill = .data$feature_abun),
alpha = 0.75 ,
size = 1,
shape = 21,
stroke = 0.15,
color = 'black',
position = ggplot2::position_jitterdodge()
) +
ggplot2::scale_fill_brewer(palette = "Spectral") +
ggplot2::scale_x_discrete(
expand = ggplot2::expansion(mult = c(0, 0.7)))
temp_plot <- temp_plot +
nature_theme(metadata_name,
joined_features_metadata_prev[
'feature_abun']) +
ggplot2::theme(
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
panel.background = ggplot2::element_blank(),
axis.line = ggplot2::element_line(colour = "black")
) +
ggplot2::xlab(feature_name) +
ggplot2::ylab(metadata_name) +
ggplot2::theme(legend.position = "none") +
ggplot2::annotate(
geom = "text",
x = Inf,
y = Inf,
hjust = 1,
vjust = 1,
label = sprintf(
"FDR: %s\nCoefficient (in full model): %s\nN: %s\nN (not zero): %s",
formatC(qval, format = "e", digits = 1),
formatC(
coef_val,
format = "e",
digits = 1
),
formatC(
N_total,
format = 'f',
digits = 0
),
formatC(
N_nonzero,
format = 'f',
digits = 0
)
) ,
color = "black",
size = 2,
fontface = "italic"
) +
ggplot2::coord_flip()
return(temp_plot)
}
# Create grid for prevalence vs. categorical associations
make_tile_plot <- function(joined_features_metadata_prev,
metadata_name,
feature_name,
normalization,
transformation,
coef_val,
qval,
N_nonzero,
N_total,
results_value) {
match.arg(normalization, c('Total sum scaling', 'Center log ratio', 'None'))
match.arg(transformation, c('Log base 2', 'Pseudo-log base 2', 'None'))
count_df <- joined_features_metadata_prev %>%
dplyr::group_by(.data$feature_abun, .data$metadata) %>%
dplyr::summarise(count = dplyr::n(), .groups = 'drop')
x_vals <-
unique(joined_features_metadata_prev$feature_abun)
y_vals <-
unique(joined_features_metadata_prev$metadata)
complete_grid <-
expand.grid(feature_abun = x_vals,
metadata = y_vals)
table_df <- complete_grid %>%
dplyr::left_join(count_df, by =
c("feature_abun", "metadata")) %>%
dplyr::mutate(count = ifelse(
is.na(.data$count), 0, .data$count))
temp_plot <-
ggplot2::ggplot(table_df,
ggplot2::aes(
x = .data$metadata,
y = .data$feature_abun
)) +
ggplot2::geom_tile(
ggplot2::aes(fill = .data$count),
color = "white",
lwd = 1.5,
linetype = 1
) +
ggplot2::geom_text(
ggplot2::aes(label = .data$count),
color = "black",
size = 32 / nrow(table_df)
) +
ggplot2::coord_fixed(ratio = 0.5) +
ggplot2::scale_fill_gradient2(
low = "#075AFF",
mid = "#FFFFCC",
high = "#FF0000"
) +
ggplot2::scale_y_discrete(
expand = ggplot2::expansion(mult = c(0, 1 + nrow(
table_df
) / 6))) +
ggplot2::theme(
panel.background = ggplot2::element_blank(),
legend.position = "none"
)
temp_plot <- temp_plot +
nature_theme(as.character(table_df$metadata),
joined_features_metadata_prev[
'feature_abun']) +
ggplot2::theme(
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
panel.background = ggplot2::element_blank(),
axis.line = ggplot2::element_line(colour = "black")
) +
ggplot2::xlab(metadata_name) +
ggplot2::ylab(feature_name) +
ggplot2::theme(legend.position = "none") +
ggplot2::annotate(
geom = "text",
x = Inf,
y = Inf,
hjust = 1,
vjust = 1,
label = sprintf(
"Value: %s\nFDR: %s\nCoefficient (in full model): %s",
paste0(results_value, collapse = ', '),
paste0(
formatC(qval, format = "e", digits = 1),
collapse = ', '
),
paste0(
formatC(
coef_val,
format = "e",
digits = 1
),
collapse = ', '
)
) ,
color = "black",
size = 2,
fontface = "italic"
)
return(temp_plot)
}
# Create plots for prevalence associations
make_logistic_plot <- function(this_signif_association,
joined_features_metadata,
metadata,
metadata_name,
feature_name,
normalization,
transformation,
feature_specific_covariate_name,
feature_specific_covariate) {
match.arg(normalization, c('Total sum scaling', 'Center log ratio', 'None'))
match.arg(transformation, c('Log base 2', 'Pseudo-log base 2', 'None'))
coef_val <-
this_signif_association[
this_signif_association$model == 'logistic',]$coef
qval <-
this_signif_association[
this_signif_association$model == 'logistic',
]$qval_individual
N_nonzero <-
this_signif_association[
this_signif_association$model == 'logistic',]$N_not_zero
N_total <-
this_signif_association[
this_signif_association$model == 'logistic',]$N
results_value <-
this_signif_association[
this_signif_association$model == 'logistic',]$value
joined_features_metadata_prev <-
joined_features_metadata
joined_features_metadata_prev$feature_abun <-
ifelse(
is.na(joined_features_metadata_prev$feature_abun),
'Absent',
'Present'
)
joined_features_metadata_prev$feature_abun <-
factor(
joined_features_metadata_prev$feature_abun,
levels = c('Present', 'Absent')
)
if (is.numeric(joined_features_metadata_prev$metadata) &
length(unique(
joined_features_metadata_prev$metadata)) > 1) {
logging::loginfo(
"Creating boxplot for continuous data (logistic), %s vs %s",
metadata_name,
feature_name
)
temp_plot <- make_boxplot_logistic(joined_features_metadata_prev,
metadata_name,
feature_name,
normalization,
transformation,
coef_val,
qval,
N_nonzero,
N_total,
results_value)
} else {
joined_features_metadata_prev$feature_abun <-
factor(
joined_features_metadata_prev$feature_abun,
levels = c('Absent', 'Present')
)
x_axis_label_names <-
unique(joined_features_metadata_prev$metadata)
sorted_fixed_order <-
order(match(results_value, levels(x_axis_label_names)))
coef_val <- coef_val[sorted_fixed_order]
qval <- qval[sorted_fixed_order]
N_nonzero <- N_nonzero[sorted_fixed_order]
N_total <- N_total[sorted_fixed_order]
results_value <-
results_value[sorted_fixed_order]
if (!is.null(feature_specific_covariate_name)) {
if (metadata_name == feature_specific_covariate_name) {
renamed_levels <-
as.character(levels(
feature_specific_covariate[, feature_name]))
} else {
renamed_levels <-
as.character(levels(metadata[, metadata_name]))
}
} else {
renamed_levels <-
as.character(levels(metadata[, metadata_name]))
}
if (length(renamed_levels) == 0) {
renamed_levels <- x_axis_label_names
}
for (name in x_axis_label_names) {
mean_abun <- mean(
joined_features_metadata_prev$feature_abun[
joined_features_metadata_prev$metadata ==
name] == 'Present',
na.rm = TRUE
)
new_n <-
paste(name,
" (p = ",
round(mean_abun, 2) * 100,
"%)",
sep = "")
levels(joined_features_metadata_prev[, 'metadata'])[
levels(joined_features_metadata_prev[, 'metadata'])
== name] <-
new_n
renamed_levels <-
replace(renamed_levels,
renamed_levels == name,
new_n)
}
logging::loginfo(
"Creating tile plot for categorical data (logistic), %s vs %s",
metadata_name,
feature_name
)
temp_plot <- make_tile_plot(joined_features_metadata_prev,
metadata_name,
feature_name,
normalization,
transformation,
coef_val,
qval,
N_nonzero,
N_total,
results_value)
}
return(temp_plot)
}
# Create individual plots for significant associations
maaslin3_association_plots <-
function(merged_results,
metadata,
features,
max_significance = 0.1,
figures_folder,
max_pngs = 10,
normalization,
transform,
feature_specific_covariate = NULL,
feature_specific_covariate_name = NULL,
feature_specific_covariate_record = NULL,
save_plots_rds = FALSE) {
match.arg(normalization, c("TSS", "CLR", "NONE"))
match.arg(transform, c("LOG", "PLOG", "NONE"))
# Disregard abundance-induced-prevalence errors in plotting
merged_results$error[grepl("Prevalence association possibly induced",
merged_results$error)] <- NA
new_name_normalization <-
c('Total sum scaling', 'Center log ratio', 'None')
names(new_name_normalization) <- c("TSS", "CLR", "NONE")
normalization <- new_name_normalization[normalization]
new_name_transformation <-
c('Log base 2', 'Pseudo-log base 2', 'None')
names(new_name_transformation) <- c("LOG", 'PLOG', "NONE")
transformation <- new_name_transformation[transform]
merged_results <-
merged_results[is.na(merged_results$error) &
!is.na(merged_results$qval_individual) &
merged_results$qval_individual <
max_significance,]
if (nrow(merged_results) == 0) {
logging::loginfo(paste("All associations had errors
or were insignificant."))
return(NULL)
}
merged_results <-
merged_results[order(merged_results$qval_individual),]
logging::loginfo(
paste(
"Plotting associations from most",
"to least significant,",
"grouped by metadata"
)
)
saved_plots <- list()
features_by_metadata <-
unique(merged_results[, c('feature', 'metadata', 'model')])
# Iterate through associations to make plots
for (row_num in seq(min(nrow(features_by_metadata), max_pngs))) {
feature_name <- features_by_metadata[row_num, 'feature']
feature_abun <- data.frame(sample = rownames(features),
feature_abun = features[, feature_name])
metadata_name <- features_by_metadata[row_num, 'metadata']
if (!is.null(feature_specific_covariate_name)) {
if (metadata_name == feature_specific_covariate_name) {
metadata_sub <-
data.frame(
sample = rownames(feature_specific_covariate),
metadata = feature_specific_covariate[,
feature_name]
)
} else {
metadata_sub <- data.frame(sample = rownames(metadata),
metadata =
metadata[, metadata_name])
}
} else {
metadata_sub <- data.frame(sample = rownames(metadata),
metadata = metadata[, metadata_name])
}
joined_features_metadata <-
dplyr::inner_join(feature_abun, metadata_sub, by = c('sample'))
model_name <- features_by_metadata[row_num, 'model']
this_signif_association <-
merged_results[merged_results$feature == feature_name &
merged_results$metadata == metadata_name &
merged_results$model == model_name,]
if ('linear' == model_name) {
temp_plot <- make_lm_plot(this_signif_association,
joined_features_metadata,
metadata,
metadata_name,
feature_name,
normalization,
transformation,
feature_specific_covariate_name,
feature_specific_covariate)
}
if ('logistic' == model_name) {
temp_plot <- make_logistic_plot(this_signif_association,
joined_features_metadata,
metadata,
metadata_name,
feature_name,
normalization,
transformation,
feature_specific_covariate_name,
feature_specific_covariate)
}
saved_plots[[metadata_name]][[feature_name]][[model_name]] <-
temp_plot
}
association_plots_folder <-
file.path(figures_folder, 'association_plots')
if (!file.exists(association_plots_folder)) {
dir.create(association_plots_folder)
}
# Save all plots
vapply(names(saved_plots), function(metadata_variable) {
# Save RDS file for each metadata_variable
if (save_plots_rds) {
saveRDS(saved_plots[[metadata_variable]],
file = file.path(association_plots_folder,
paste0(metadata_variable,
"_gg_associations.RDS")))
}
# Iterate over each feature in the metadata_variable
vapply(names(saved_plots[[metadata_variable]]), function(feature) {
# Iterate over each model_name for the feature
vapply(names(saved_plots[[metadata_variable]][[feature]]),
function(model_name) {
this_plot <- saved_plots[[metadata_variable]][[
feature]][[model_name]]
# Create the subfolder for the plot
association_plots_sub_folder <- file.path(
association_plots_folder, metadata_variable, model_name)
if (!file.exists(association_plots_sub_folder)) {
dir.create(association_plots_sub_folder,
recursive = TRUE)
}
# Define the file path for saving the plot
png_file <- file.path(association_plots_sub_folder,
paste0(metadata_variable, '_',
feature, "_", model_name, ".png"))
# Calculate height based on plot labels
height <- max(960, 18 * max(nchar(unlist(strsplit(
this_plot$labels$y, '\n')))))
# Try saving the plot
tryCatch({
withCallingHandlers({
ggplot2::ggsave(filename = png_file,
plot = this_plot,
dpi = 600,
width = 960 / 300,
height = height / 300)
}, warning = function(w) {
invokeRestart("muffleWarning") })
})
return(0)
}, numeric(1))
return(0)
}, numeric(1))
return(0)
}, numeric(1))
return(saved_plots)
}
maaslin3_association_plots(
merged_results = merged_results,
metadata = unstandardized_metadata,
features = transformed_data,
max_significance = max_significance,
figures_folder = figures_folder,
max_pngs = max_pngs,
normalization = normalization,
transform = transform,
feature_specific_covariate = feature_specific_covariate,
feature_specific_covariate_name =
feature_specific_covariate_name,
feature_specific_covariate_record =
feature_specific_covariate_record,
save_plots_rds = save_plots_rds
)
remove.packages('maaslin3')
devtools::install('~/Documents/GitHub/maaslin3/')
.rs.restartR()
devtools::check('~/Documents/GitHub/maaslin3/')
devtools::check('~/Documents/GitHub/maaslin3/')
devtools::check('~/Documents/GitHub/maaslin3/')
devtools::check('~/Documents/GitHub/maaslin3/')
