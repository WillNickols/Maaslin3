c(contrast_mat_cols,
setdiff(included_coefs, contrast_mat_cols))
contrast_mat_tmp <-
contrast_mat_tmp[, included_coefs, drop = FALSE]
# Run contrast test
contrast_vec <- t(matrix(contrast_mat_tmp[selected_test,]))
error_message <- NA
calling_env <- environment()
test_out <- tryCatch({
if (!uses_random_effects | model == 'prevalence') {
summary_out <- summary(multcomp::glht(
fit,
linfct = contrast_vec,
rhs = offsets_to_test[row_index],
coef. = function(x) { coef(x, complete = FALSE) }
))$test
} else {
summary_out <- summary(multcomp::glht(
fit,
linfct = contrast_vec,
rhs = offsets_to_test[row_index]
))$test
}
c(summary_out$pvalues, summary_out$coefficients,
summary_out$sigma)
}, warning = function(w) {
message(sprintf("Feature %s : %s", names(fit), w))
assign("error_message", conditionMessage(w),
envir = calling_env)
invokeRestart("muffleWarning")
}, error = function(err) {
assign("error_message", err$message, envir = calling_env)
error_obj <- c(NA, NA, NA)
return(error_obj)
})
return(test_out[1])
})
paras$error[paras$test == selected_test &
!is.na(paras$coef) &
!is.na(paras$stderr)] <-
ifelse(!is.na(paras$pval_individual[
paras$test == selected_test &
!is.na(paras$coef) &
!is.na(paras$stderr)]) &
is.na(pvals_new),
"P-value became NA during median comparison",
paras$error[paras$test == selected_test &
!is.na(paras$coef) &
!is.na(paras$stderr)]
)
paras$pval_individual[paras$test == selected_test &
!is.na(paras$coef) &
!is.na(paras$stderr)] <- pvals_new
}
}
return(paras)
}
maaslin_contrast_test(fits = fit_out$fit_data_abundance$fits,
contrast_mat = contrast_mat)
contrast_mat <- matrix(c(1, 1, 0, 0, 0, 0, 1, 1),
ncol = 4, nrow = 2, byrow = TRUE)
colnames(contrast_mat) <- c("diagnosisUC",
"diagnosisCD",
"dysbiosis_statedysbiosis_UC",
"dysbiosis_statedysbiosis_CD")
rownames(contrast_mat) <- c("diagnosis_test", "dysbiosis_test")
contrast_mat
maaslin_contrast_test(fits = fit_out$fit_data_abundance$fits,
contrast_mat = contrast_mat)
remove.packages('maaslin3')
.rs.restartR()
devtools::install('~/Documents/GitHub/maaslin3')
# Install devtools if not present
if (!require('devtools', character.only = TRUE)) {
install.packages('devtools')
}
# Install MaAsLin 3
library("devtools")
install_github("biobakery/maaslin3_tutorial_files")
### RNA abundances
input_data <- system.file(
'extdata','HMP2_pwyRNA.tsv', package="maaslin3TutorialFiles")
df_input_data = read.table(file = input_data,
header = TRUE,
sep = "\t",
row.names = 1,
stringsAsFactors = FALSE)
df_input_data[1:5, 1:5]
# RNA/DNA ratio data
input_dataratio <- system.file(
'extdata','HMP2_pwy.RNA_DNA_ratio.tsv', package="maaslin3TutorialFiles")
df_input_dataratio = read.table(file = input_dataratio,
header = TRUE,
sep = "\t",
row.names = 1,
stringsAsFactors = FALSE)
df_input_dataratio[1:5, 1:5]
# Metadata from the HMP2
input_metadata <-system.file(
'extdata','HMP2_metadata.tsv', package="maaslin3TutorialFiles")
df_input_metadata = read.table(file             = input_metadata,
header           = TRUE,
sep              = "\t",
row.names        = 1,
stringsAsFactors = FALSE)
df_input_metadata$diagnosis <-
factor(df_input_metadata$diagnosis, levels = c('nonIBD', 'UC', 'CD'))
df_input_metadata$dysbiosis_state <-
factor(df_input_metadata$dysbiosis_state, levels = c('none', 'dysbiosis_UC', 'dysbiosis_CD'))
df_input_metadata$antibiotics <-
factor(df_input_metadata$antibiotics, levels = c('No', 'Yes'))
df_input_metadata[1:5, 1:5]
# DNA data
input_dnadata <- system.file(
'extdata','HMP2_pwyDNA.tsv', package="maaslin3TutorialFiles")
df_input_dnadata = read.table(file             = input_dnadata,
header           = TRUE,
sep              = "\t",
row.names        = 1,
stringsAsFactors = FALSE)
df_input_dnadata[1:5, 1:5]
set.seed(1)
fit_maaslin_rna <- maaslin3(
input_data = df_input_data,
input_metadata = df_input_metadata,
output = 'demo_output_rna',
fixed_effects = c('diagnosis', 'dysbiosis_state', 'antibiotics', 'age'),
random_effects = c('participant_id'),
coef_plot_vars = c('dysbiosis_state dysbiosis_CD', 'diagnosis CD'),
heatmap_vars = c('dysbiosis_state dysbiosis_UC', 'diagnosis UC', 'age',
'antibiotics Yes'))
library(maaslin3)
set.seed(1)
fit_maaslin_rna <- maaslin3(
input_data = df_input_data,
input_metadata = df_input_metadata,
output = 'demo_output_rna',
fixed_effects = c('diagnosis', 'dysbiosis_state', 'antibiotics', 'age'),
random_effects = c('participant_id'),
coef_plot_vars = c('dysbiosis_state dysbiosis_CD', 'diagnosis CD'),
heatmap_vars = c('dysbiosis_state dysbiosis_UC', 'diagnosis UC', 'age',
'antibiotics Yes'))
getwd()
list.files()
setwd("~/Documents/GitHub/maaslin3/vignettes")
set.seed(1)
fit_maaslin_rna <- maaslin3(
input_data = df_input_data,
input_metadata = df_input_metadata,
output = 'demo_output_rna',
fixed_effects = c('diagnosis', 'dysbiosis_state', 'antibiotics', 'age'),
random_effects = c('participant_id'),
coef_plot_vars = c('dysbiosis_state dysbiosis_CD', 'diagnosis CD'),
heatmap_vars = c('dysbiosis_state dysbiosis_UC', 'diagnosis UC', 'age',
'antibiotics Yes'))
fit_maaslin_ratio <- maaslin3(
input_data = df_input_dataratio,
input_metadata = df_input_metadata,
output = 'demo_output_ratio',
fixed_effects = c('diagnosis', 'dysbiosis_state', 'antibiotics', 'age'),
random_effects = c('participant_id'),
normalization = 'NONE',
coef_plot_vars = c('dysbiosis_state dysbiosis_CD', 'diagnosis CD'),
heatmap_vars = c('dysbiosis_state dysbiosis_UC', 'diagnosis UC', 'age',
'antibiotics Yes'))
fit_maaslin_ratio <- maaslin3(
input_data = df_input_dataratio,
input_metadata = df_input_metadata,
output = 'demo_output_ratio',
fixed_effects = c('diagnosis', 'dysbiosis_state', 'antibiotics', 'age'),
random_effects = c('participant_id'),
normalization = 'NONE',
coef_plot_vars = c('dysbiosis_state dysbiosis_CD', 'diagnosis CD'),
heatmap_vars = c('dysbiosis_state dysbiosis_UC', 'diagnosis UC', 'age',
'antibiotics Yes'), warn_prevalence = F)
preprocess_out <- preprocess_dna_mtx(df_input_dnadata, df_input_data)
fit_maaslin_mtx_mgx <- maaslin3(
input_data = preprocess_out$rna_table,
input_metadata = df_input_metadata,
output = 'demo_output_mtx_mgx',
fixed_effects = c('diagnosis', 'dysbiosis_state', 'antibiotics', 'age'),
random_effects = c('participant_id'),
feature_specific_covariate = preprocess_out$dna_table,
feature_specific_covariate_name = 'DNA',
feature_specific_covariate_record = FALSE,
coef_plot_vars = c('dysbiosis_state dysbiosis_CD', 'diagnosis CD'),
heatmap_vars = c('dysbiosis_state dysbiosis_UC', 'diagnosis UC', 'age',
'antibiotics Yes'))
# features called by the RNA/DNA ratios compared to the Raw RNA abundances
intersect(results_rna_ratio$feature, results_rna$feature)
BiocCheck::BiocCheck('~/Documents/GitHub/maaslin3/')
character(1)
c(unlist(vapply(c('a', 'b', 'c'), function(x){list(x)})))
c(unlist(vapply(c('a', 'b', 'c'), function(x){list(x)}), character(1)))
c(unlist(vapply(c('a', 'b', 'c'), function(x){list(x)}, character(1))))
c(unlist(vapply(c('a', 'b', 'c'), function(x){unlist(list(x))}, character(1))))
unlist(c(1,2,3))
seq(3)
BiocCheck::BiocCheck('~/Documents/GitHub/maaslin3/')
BiocCheck::BiocCheck('~/Documents/GitHub/maaslin3/')
BiocCheck::BiocCheck('~/Documents/GitHub/maaslin3/')
BiocCheck::BiocCheck('~/Documents/GitHub/maaslin3/')
BiocCheck::BiocCheck('~/Documents/GitHub/maaslin3/')
remove.packages('maaslin3')
devtools::install('~/Documents/GitHub/maaslin3/')
.rs.restartR()
BiocCheck::BiocCheck('~/Documents/GitHub/maaslin3/')
library(testthat)
library(maaslin3)
expected_results_run1 <- read.table("expected_results_run1.tsv", header = TRUE, stringsAsFactors=FALSE, sep="\t")
setwd("~/Documents/GitHub/maaslin3/tests/testthat")
library(testthat)
library(maaslin3)
expected_results_run1 <- read.table("expected_results_run1.tsv", header = TRUE, stringsAsFactors=FALSE, sep="\t")
taxa_table <- read.table(system.file(package="maaslin3","extdata","HMP2_taxonomy.tsv"), header = TRUE, sep="\t")
metadata <- read.table(system.file(package="maaslin3","extdata","HMP2_metadata.tsv"), header = TRUE, sep="\t")
metadata$diagnosis <- factor(metadata$diagnosis, levels = c('nonIBD', 'UC', 'CD'))
metadata$dysbiosis_state <- factor(metadata$dysbiosis_state, levels = c('none', 'dysbiosis_UC', 'dysbiosis_CD'))
metadata$antibiotics <- factor(metadata$antibiotics, levels = c('No', 'Yes'))
# Run MaAsLin 3
output_tmp <- tempfile()
set.seed(1)
fit_out <- maaslin3(input_data = taxa_table,
input_metadata = metadata,
output = output_tmp,
normalization = 'TSS',
transform = 'LOG',
formula = '~ diagnosis + dysbiosis_state + antibiotics + age + reads',
save_models = FALSE,
plot_summary_plot = T,
plot_associations = T,
max_significance = 0.1,
augment = TRUE,
median_comparison_abundance = TRUE,
median_comparison_prevalence = FALSE,
cores=1,
verbosity = 'WARN')
maaslin_results = read.table(file.path(output_tmp, "significant_results.tsv"), header = TRUE, stringsAsFactors=FALSE)
expect_that(expected_results_run1$metadata[1:50],equals(maaslin_results$metadata[1:50]))
expect_that(expected_results_run1$feature[1:50],equals(maaslin_results$feature[1:50]))
expect_that(round(expected_results_run1$N[1:50],10),equals(round(maaslin_results$N[1:50],10)))
expect_that(round(as.numeric(expected_results_run1$pval_individual[1:50]),10),
equals(round(as.numeric(maaslin_results$pval_individual[1:50]),10)))
expect_that(round(as.numeric(expected_results_run1$qval_individual[1:50]),10),
equals(round(as.numeric(maaslin_results$qval_individual[1:50]),10)))
se <- SummarizedExperiment::SummarizedExperiment(
assays = list(taxa_table = t(taxa_table)),
colData = metadata
)
fit_out <- maaslin3(input_data = se,
input_metadata = metadata,
output = output_tmp,
normalization = 'TSS',
transform = 'LOG',
formula = '~ diagnosis + dysbiosis_state + antibiotics + age + reads',
save_models = FALSE,
plot_summary_plot = T,
plot_associations = T,
max_significance = 0.1,
augment = TRUE,
median_comparison_abundance = TRUE,
median_comparison_prevalence = FALSE,
cores=1,
verbosity = 'WARN')
# Load required packages
library(TreeSummarizedExperiment)
library(ape)
# Example Assay Data (taxa abundances for 3 samples)
taxa_table <- matrix(c(10, 20, 30,
5, 10, 15,
3, 6, 9),
ncol = 3, byrow = TRUE)
# Assign column and row names
colnames(taxa_table) <- c("Sample1", "Sample2", "Sample3")
rownames(taxa_table) <- c("Taxon1", "Taxon2", "Taxon3")
# Example Metadata (e.g., sample information)
metadata <- DataFrame(
SampleType = c("Control", "Treatment", "Treatment"),
Batch = c("Batch1", "Batch1", "Batch2")
)
# Example Phylogenetic Tree (simple tree with 3 tips)
phylo_tree <- read.tree(text = "((Taxon1, Taxon2), Taxon3);")
# Create a TreeSummarizedExperiment object
tse <- TreeSummarizedExperiment(
assays = list(taxa_table = t(taxa_table)),  # Transpose the taxa table
colData = metadata,
tree = phylo_tree  # Include the phylogenetic tree
)
library(TreeSummarizedExperiment)
# assays data (typically, representing observed data from an experiment)
assay_data <- rbind(rep(0, 4), matrix(1:20, nrow = 5))
colnames(assay_data) <- paste0("sample", 1:4)
rownames(assay_data) <- paste("entity", seq_len(6), sep = "")
assay_data
row_data <- data.frame(Kingdom = "A",
Phylum = rep(c("B1", "B2"), c(2, 4)),
Class = rep(c("C1", "C2", "C3"), each = 2),
OTU = paste0("D", 1:6),
row.names = rownames(assay_data),
stringsAsFactors = FALSE)
row_data
col_data <- data.frame(gg = c(1, 2, 3, 3),
group = rep(LETTERS[1:2], each = 2),
row.names = colnames(assay_data),
stringsAsFactors = FALSE)
col_data
library(ape)
# The first toy tree
set.seed(12)
row_tree <- rtree(5)
# The second toy tree
set.seed(12)
col_tree <- rtree(4)
# change node labels
col_tree$tip.label <- colnames(assay_data)
col_tree$node.label <- c("All", "GroupA", "GroupB")
tip_lab <- row_tree$tip.label
row_lab <- tip_lab[c(1, 1:5)]
row_lab
both_tse <- TreeSummarizedExperiment(assays = list(Count = assay_data),
rowData = row_data,
colData = col_data,
rowTree = row_tree,
rowNodeLab = row_lab,
colTree = col_tree)
both_tse
SummarizedExperiment::assay(both_tse)
agg_col <- aggTSE(x = taxa_tse,
colLevel = c("GroupA", "GroupB"),
colFun = sum)
taxa_tse <- changeTree(x = both_tse, rowTree = taxa_tree,
rowNodeLab = taxa[["OTU"]])
(taxa <- rowData(both_tse))
taxa_tree <- toTree(data = taxa)
taxa_tse <- changeTree(x = both_tse, rowTree = taxa_tree,
rowNodeLab = taxa[["OTU"]])
agg_col <- aggTSE(x = taxa_tse,
colLevel = c("GroupA", "GroupB"),
colFun = sum)
# or use node numbers to specify colLevel
agg_col <- aggTSE(x = taxa_tse, colLevel = c(6, 7), colFun = sum)
agg_col
TreeSummarizedExperiment::assays(agg_col)
SummarizedExperiment::assay(agg_col)
fit_out <- maaslin3(input_data = agg_col,
input_metadata = metadata,
output = output_tmp,
normalization = 'TSS',
transform = 'LOG',
formula = '~ diagnosis + dysbiosis_state + antibiotics + age + reads',
save_models = FALSE,
plot_summary_plot = T,
plot_associations = T,
max_significance = 0.1,
augment = TRUE,
median_comparison_abundance = TRUE,
median_comparison_prevalence = FALSE,
cores=1,
verbosity = 'WARN')
tse <- TreeSummarizedExperiment::TreeSummarizedExperiment(
assays = list(taxa_table = t(taxa_table)),
colData = metadata
)
fit_out <- maaslin3(input_data = tse,
input_metadata = metadata,
output = output_tmp,
normalization = 'TSS',
transform = 'LOG',
formula = '~ diagnosis + dysbiosis_state + antibiotics + age + reads',
save_models = FALSE,
plot_summary_plot = T,
plot_associations = T,
max_significance = 0.1,
augment = TRUE,
median_comparison_abundance = TRUE,
median_comparison_prevalence = FALSE,
cores=1,
verbosity = 'WARN')
metadata
tse
taxa_table
library(testthat)
library(maaslin3)
expected_results_run1 <- read.table("expected_results_run1.tsv", header = TRUE, stringsAsFactors=FALSE, sep="\t")
taxa_table <- read.table(system.file(package="maaslin3","extdata","HMP2_taxonomy.tsv"), header = TRUE, sep="\t")
metadata <- read.table(system.file(package="maaslin3","extdata","HMP2_metadata.tsv"), header = TRUE, sep="\t")
metadata$diagnosis <- factor(metadata$diagnosis, levels = c('nonIBD', 'UC', 'CD'))
metadata$dysbiosis_state <- factor(metadata$dysbiosis_state, levels = c('none', 'dysbiosis_UC', 'dysbiosis_CD'))
metadata$antibiotics <- factor(metadata$antibiotics, levels = c('No', 'Yes'))
# Run MaAsLin 3
output_tmp <- tempfile()
set.seed(1)
fit_out <- maaslin3(input_data = taxa_table,
input_metadata = metadata,
output = output_tmp,
normalization = 'TSS',
transform = 'LOG',
formula = '~ diagnosis + dysbiosis_state + antibiotics + age + reads',
save_models = FALSE,
plot_summary_plot = T,
plot_associations = T,
max_significance = 0.1,
augment = TRUE,
median_comparison_abundance = TRUE,
median_comparison_prevalence = FALSE,
cores=1,
verbosity = 'WARN')
maaslin_results = read.table(file.path(output_tmp, "significant_results.tsv"), header = TRUE, stringsAsFactors=FALSE)
expect_that(expected_results_run1$metadata[1:50],equals(maaslin_results$metadata[1:50]))
expect_that(expected_results_run1$feature[1:50],equals(maaslin_results$feature[1:50]))
expect_that(round(expected_results_run1$N[1:50],10),equals(round(maaslin_results$N[1:50],10)))
expect_that(round(as.numeric(expected_results_run1$pval_individual[1:50]),10),
equals(round(as.numeric(maaslin_results$pval_individual[1:50]),10)))
expect_that(round(as.numeric(expected_results_run1$qval_individual[1:50]),10),
equals(round(as.numeric(maaslin_results$qval_individual[1:50]),10)))
se <- SummarizedExperiment::SummarizedExperiment(
assays = list(taxa_table = t(taxa_table)),
colData = metadata
)
fit_out <- maaslin3(input_data = se,
input_metadata = metadata,
output = output_tmp,
normalization = 'TSS',
transform = 'LOG',
formula = '~ diagnosis + dysbiosis_state + antibiotics + age + reads',
save_models = FALSE,
plot_summary_plot = T,
plot_associations = T,
max_significance = 0.1,
augment = TRUE,
median_comparison_abundance = TRUE,
median_comparison_prevalence = FALSE,
cores=1,
verbosity = 'WARN')
tse <- TreeSummarizedExperiment::TreeSummarizedExperiment(
assays = list(taxa_table = t(taxa_table)),
colData = metadata
)
fit_out <- maaslin3(input_data = tse,
input_metadata = metadata,
output = output_tmp,
normalization = 'TSS',
transform = 'LOG',
formula = '~ diagnosis + dysbiosis_state + antibiotics + age + reads',
save_models = FALSE,
plot_summary_plot = T,
plot_associations = T,
max_significance = 0.1,
augment = TRUE,
median_comparison_abundance = TRUE,
median_comparison_prevalence = FALSE,
cores=1,
verbosity = 'WARN')
unlink(output_tmp, recursive = T)
inherits(tse, "SummarizedExperiment")
match.arg(warn_prevalence, c(TRUE, FALSE))
match.arg('a', c(TRUE, FALSE))
match.arg(TRUE, c(TRUE, FALSE))
match.arg("TRUE", c(TRUE, FALSE))
library(S4Vectors)
metadata <- as(metadata, "DataFrame")
metadata[, 1:5]
maaslin3(input_data = taxa_table,
input_metadata = metadata,
output = 'hmp2_output',
formula = '~ diagnosis + dysbiosis_state +
antibiotics + age + reads',
normalization = 'TSS',
transform = 'LOG',
augment = TRUE,
standardize = TRUE,
max_significance = 0.1,
median_comparison_abundance = TRUE,
median_comparison_prevalence = FALSE,
max_pngs = 10,
cores = 1)
is.data.frame(metadata)
inherits(metadata, 'DataFrame')
as.data.frame(metadata)
library(testthat)
library(maaslin3)
expected_results_run1 <- read.table("expected_results_run1.tsv", header = TRUE, stringsAsFactors=FALSE, sep="\t")
taxa_table <- read.table(system.file(package="maaslin3","extdata","HMP2_taxonomy.tsv"), header = TRUE, sep="\t")
metadata <- read.table(system.file(package="maaslin3","extdata","HMP2_metadata.tsv"), header = TRUE, sep="\t")
metadata$diagnosis <- factor(metadata$diagnosis, levels = c('nonIBD', 'UC', 'CD'))
metadata$dysbiosis_state <- factor(metadata$dysbiosis_state, levels = c('none', 'dysbiosis_UC', 'dysbiosis_CD'))
metadata$antibiotics <- factor(metadata$antibiotics, levels = c('No', 'Yes'))
# Run MaAsLin 3
output_tmp <- tempfile()
set.seed(1)
fit_out <- maaslin3(input_data = taxa_table,
input_metadata = metadata,
output = output_tmp,
normalization = 'TSS',
transform = 'LOG',
formula = '~ diagnosis + dysbiosis_state + antibiotics + age + reads',
save_models = FALSE,
plot_summary_plot = T,
plot_associations = T,
max_significance = 0.1,
augment = TRUE,
median_comparison_abundance = TRUE,
median_comparison_prevalence = FALSE,
cores=1,
verbosity = 'WARN')
BiocCheck::BiocCheck('~/Documents/GitHub/maaslin3/')
BiocCheck::BiocCheck('~/Documents/GitHub/maaslin3/')
BiocCheck::BiocCheck('~/Documents/GitHub/maaslin3/')
BiocCheck::BiocCheck('~/Documents/GitHub/maaslin3/')
BiocCheck::BiocCheck('~/Documents/GitHub/maaslin3/')
BiocCheck::BiocCheck('~/Documents/GitHub/maaslin3/')
BiocCheck::BiocCheck('~/Documents/GitHub/maaslin3/')
